package com.hpdxay.hpd3dmgame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hpdxay.hpd3dmgame.entities.ChapterListItemDataItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_LIST_ITEM_DATA_ITEM".
*/
public class ChapterListItemDataItemDao extends AbstractDao<ChapterListItemDataItem, Long> {

    public static final String TABLENAME = "CHAPTER_LIST_ITEM_DATA_ITEM";

    /**
     * Properties of entity ChapterListItemDataItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Typeid = new Property(1, String.class, "typeid", false, "TYPEID");
        public final static Property Typeid2 = new Property(2, String.class, "typeid2", false, "TYPEID2");
        public final static Property Sortrank = new Property(3, String.class, "sortrank", false, "SORTRANK");
        public final static Property Flag = new Property(4, String.class, "flag", false, "FLAG");
        public final static Property Ismake = new Property(5, String.class, "ismake", false, "ISMAKE");
        public final static Property Channel = new Property(6, String.class, "channel", false, "CHANNEL");
        public final static Property Arcrank = new Property(7, String.class, "arcrank", false, "ARCRANK");
        public final static Property Click = new Property(8, String.class, "click", false, "CLICK");
        public final static Property Money = new Property(9, String.class, "money", false, "MONEY");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Shorttitle = new Property(11, String.class, "shorttitle", false, "SHORTTITLE");
        public final static Property Color = new Property(12, String.class, "color", false, "COLOR");
        public final static Property Writer = new Property(13, String.class, "writer", false, "WRITER");
        public final static Property Source = new Property(14, String.class, "source", false, "SOURCE");
        public final static Property Litpic = new Property(15, String.class, "litpic", false, "LITPIC");
        public final static Property Pubdate = new Property(16, String.class, "pubdate", false, "PUBDATE");
        public final static Property Senddate = new Property(17, String.class, "senddate", false, "SENDDATE");
        public final static Property Mid = new Property(18, String.class, "mid", false, "MID");
        public final static Property Keywords = new Property(19, String.class, "keywords", false, "KEYWORDS");
        public final static Property Lastpost = new Property(20, String.class, "lastpost", false, "LASTPOST");
        public final static Property Scores = new Property(21, String.class, "scores", false, "SCORES");
        public final static Property Goodpost = new Property(22, String.class, "goodpost", false, "GOODPOST");
        public final static Property Badpost = new Property(23, String.class, "badpost", false, "BADPOST");
        public final static Property Voteid = new Property(24, String.class, "voteid", false, "VOTEID");
        public final static Property Notpost = new Property(25, String.class, "notpost", false, "NOTPOST");
        public final static Property Description = new Property(26, String.class, "description", false, "DESCRIPTION");
        public final static Property Filename = new Property(27, String.class, "filename", false, "FILENAME");
        public final static Property Dutyadmin = new Property(28, String.class, "dutyadmin", false, "DUTYADMIN");
        public final static Property Tackid = new Property(29, String.class, "tackid", false, "TACKID");
        public final static Property Mtype = new Property(30, String.class, "mtype", false, "MTYPE");
        public final static Property Weight = new Property(31, String.class, "weight", false, "WEIGHT");
        public final static Property Fby_id = new Property(32, String.class, "fby_id", false, "FBY_ID");
        public final static Property Game_id = new Property(33, String.class, "game_id", false, "GAME_ID");
        public final static Property Feedback = new Property(34, String.class, "feedback", false, "FEEDBACK");
        public final static Property Typedir = new Property(35, String.class, "typedir", false, "TYPEDIR");
        public final static Property Typename = new Property(36, String.class, "typename", false, "TYPENAME");
        public final static Property Corank = new Property(37, String.class, "corank", false, "CORANK");
        public final static Property Isdefault = new Property(38, String.class, "isdefault", false, "ISDEFAULT");
        public final static Property Defaultname = new Property(39, String.class, "defaultname", false, "DEFAULTNAME");
        public final static Property Namerule = new Property(40, String.class, "namerule", false, "NAMERULE");
        public final static Property Namerule2 = new Property(41, String.class, "namerule2", false, "NAMERULE2");
        public final static Property Ispart = new Property(42, String.class, "ispart", false, "ISPART");
        public final static Property Moresite = new Property(43, String.class, "moresite", false, "MORESITE");
        public final static Property Siteurl = new Property(44, String.class, "siteurl", false, "SITEURL");
        public final static Property Sitepath = new Property(45, String.class, "sitepath", false, "SITEPATH");
        public final static Property Arcurl = new Property(46, String.class, "arcurl", false, "ARCURL");
        public final static Property Typeurl = new Property(47, String.class, "typeurl", false, "TYPEURL");
    };


    public ChapterListItemDataItemDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterListItemDataItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_LIST_ITEM_DATA_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPEID\" TEXT," + // 1: typeid
                "\"TYPEID2\" TEXT," + // 2: typeid2
                "\"SORTRANK\" TEXT," + // 3: sortrank
                "\"FLAG\" TEXT," + // 4: flag
                "\"ISMAKE\" TEXT," + // 5: ismake
                "\"CHANNEL\" TEXT," + // 6: channel
                "\"ARCRANK\" TEXT," + // 7: arcrank
                "\"CLICK\" TEXT," + // 8: click
                "\"MONEY\" TEXT," + // 9: money
                "\"TITLE\" TEXT," + // 10: title
                "\"SHORTTITLE\" TEXT," + // 11: shorttitle
                "\"COLOR\" TEXT," + // 12: color
                "\"WRITER\" TEXT," + // 13: writer
                "\"SOURCE\" TEXT," + // 14: source
                "\"LITPIC\" TEXT," + // 15: litpic
                "\"PUBDATE\" TEXT," + // 16: pubdate
                "\"SENDDATE\" TEXT," + // 17: senddate
                "\"MID\" TEXT," + // 18: mid
                "\"KEYWORDS\" TEXT," + // 19: keywords
                "\"LASTPOST\" TEXT," + // 20: lastpost
                "\"SCORES\" TEXT," + // 21: scores
                "\"GOODPOST\" TEXT," + // 22: goodpost
                "\"BADPOST\" TEXT," + // 23: badpost
                "\"VOTEID\" TEXT," + // 24: voteid
                "\"NOTPOST\" TEXT," + // 25: notpost
                "\"DESCRIPTION\" TEXT," + // 26: description
                "\"FILENAME\" TEXT," + // 27: filename
                "\"DUTYADMIN\" TEXT," + // 28: dutyadmin
                "\"TACKID\" TEXT," + // 29: tackid
                "\"MTYPE\" TEXT," + // 30: mtype
                "\"WEIGHT\" TEXT," + // 31: weight
                "\"FBY_ID\" TEXT," + // 32: fby_id
                "\"GAME_ID\" TEXT," + // 33: game_id
                "\"FEEDBACK\" TEXT," + // 34: feedback
                "\"TYPEDIR\" TEXT," + // 35: typedir
                "\"TYPENAME\" TEXT," + // 36: typename
                "\"CORANK\" TEXT," + // 37: corank
                "\"ISDEFAULT\" TEXT," + // 38: isdefault
                "\"DEFAULTNAME\" TEXT," + // 39: defaultname
                "\"NAMERULE\" TEXT," + // 40: namerule
                "\"NAMERULE2\" TEXT," + // 41: namerule2
                "\"ISPART\" TEXT," + // 42: ispart
                "\"MORESITE\" TEXT," + // 43: moresite
                "\"SITEURL\" TEXT," + // 44: siteurl
                "\"SITEPATH\" TEXT," + // 45: sitepath
                "\"ARCURL\" TEXT," + // 46: arcurl
                "\"TYPEURL\" TEXT);"); // 47: typeurl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_LIST_ITEM_DATA_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterListItemDataItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(2, typeid);
        }
 
        String typeid2 = entity.getTypeid2();
        if (typeid2 != null) {
            stmt.bindString(3, typeid2);
        }
 
        String sortrank = entity.getSortrank();
        if (sortrank != null) {
            stmt.bindString(4, sortrank);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(5, flag);
        }
 
        String ismake = entity.getIsmake();
        if (ismake != null) {
            stmt.bindString(6, ismake);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(7, channel);
        }
 
        String arcrank = entity.getArcrank();
        if (arcrank != null) {
            stmt.bindString(8, arcrank);
        }
 
        String click = entity.getClick();
        if (click != null) {
            stmt.bindString(9, click);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(10, money);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String shorttitle = entity.getShorttitle();
        if (shorttitle != null) {
            stmt.bindString(12, shorttitle);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(13, color);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(14, writer);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(15, source);
        }
 
        String litpic = entity.getLitpic();
        if (litpic != null) {
            stmt.bindString(16, litpic);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(17, pubdate);
        }
 
        String senddate = entity.getSenddate();
        if (senddate != null) {
            stmt.bindString(18, senddate);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(19, mid);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(20, keywords);
        }
 
        String lastpost = entity.getLastpost();
        if (lastpost != null) {
            stmt.bindString(21, lastpost);
        }
 
        String scores = entity.getScores();
        if (scores != null) {
            stmt.bindString(22, scores);
        }
 
        String goodpost = entity.getGoodpost();
        if (goodpost != null) {
            stmt.bindString(23, goodpost);
        }
 
        String badpost = entity.getBadpost();
        if (badpost != null) {
            stmt.bindString(24, badpost);
        }
 
        String voteid = entity.getVoteid();
        if (voteid != null) {
            stmt.bindString(25, voteid);
        }
 
        String notpost = entity.getNotpost();
        if (notpost != null) {
            stmt.bindString(26, notpost);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(27, description);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(28, filename);
        }
 
        String dutyadmin = entity.getDutyadmin();
        if (dutyadmin != null) {
            stmt.bindString(29, dutyadmin);
        }
 
        String tackid = entity.getTackid();
        if (tackid != null) {
            stmt.bindString(30, tackid);
        }
 
        String mtype = entity.getMtype();
        if (mtype != null) {
            stmt.bindString(31, mtype);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(32, weight);
        }
 
        String fby_id = entity.getFby_id();
        if (fby_id != null) {
            stmt.bindString(33, fby_id);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(34, game_id);
        }
 
        String feedback = entity.getFeedback();
        if (feedback != null) {
            stmt.bindString(35, feedback);
        }
 
        String typedir = entity.getTypedir();
        if (typedir != null) {
            stmt.bindString(36, typedir);
        }
 
        String typename = entity.getTypename();
        if (typename != null) {
            stmt.bindString(37, typename);
        }
 
        String corank = entity.getCorank();
        if (corank != null) {
            stmt.bindString(38, corank);
        }
 
        String isdefault = entity.getIsdefault();
        if (isdefault != null) {
            stmt.bindString(39, isdefault);
        }
 
        String defaultname = entity.getDefaultname();
        if (defaultname != null) {
            stmt.bindString(40, defaultname);
        }
 
        String namerule = entity.getNamerule();
        if (namerule != null) {
            stmt.bindString(41, namerule);
        }
 
        String namerule2 = entity.getNamerule2();
        if (namerule2 != null) {
            stmt.bindString(42, namerule2);
        }
 
        String ispart = entity.getIspart();
        if (ispart != null) {
            stmt.bindString(43, ispart);
        }
 
        String moresite = entity.getMoresite();
        if (moresite != null) {
            stmt.bindString(44, moresite);
        }
 
        String siteurl = entity.getSiteurl();
        if (siteurl != null) {
            stmt.bindString(45, siteurl);
        }
 
        String sitepath = entity.getSitepath();
        if (sitepath != null) {
            stmt.bindString(46, sitepath);
        }
 
        String arcurl = entity.getArcurl();
        if (arcurl != null) {
            stmt.bindString(47, arcurl);
        }
 
        String typeurl = entity.getTypeurl();
        if (typeurl != null) {
            stmt.bindString(48, typeurl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChapterListItemDataItem readEntity(Cursor cursor, int offset) {
        ChapterListItemDataItem entity = new ChapterListItemDataItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeid2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sortrank
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ismake
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // channel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // arcrank
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // click
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // money
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // shorttitle
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // color
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // writer
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // source
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // litpic
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // pubdate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // senddate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // mid
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // keywords
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // lastpost
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // scores
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // goodpost
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // badpost
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // voteid
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // notpost
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // description
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // filename
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // dutyadmin
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // tackid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // mtype
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // weight
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // fby_id
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // game_id
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // feedback
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // typedir
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // typename
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // corank
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // isdefault
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // defaultname
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // namerule
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // namerule2
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // ispart
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // moresite
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // siteurl
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // sitepath
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // arcurl
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47) // typeurl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChapterListItemDataItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeid2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortrank(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsmake(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChannel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArcrank(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClick(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMoney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShorttitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setColor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWriter(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSource(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLitpic(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPubdate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSenddate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMid(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setKeywords(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLastpost(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setScores(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGoodpost(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBadpost(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVoteid(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNotpost(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDescription(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFilename(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDutyadmin(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTackid(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMtype(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setWeight(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFby_id(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setGame_id(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setFeedback(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTypedir(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTypename(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setCorank(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setIsdefault(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setDefaultname(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setNamerule(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setNamerule2(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setIspart(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setMoresite(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setSiteurl(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setSitepath(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setArcurl(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setTypeurl(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChapterListItemDataItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChapterListItemDataItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
